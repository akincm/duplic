#!/usr/bin/env python3
import os, sys, shutil
import getopt
import filecmp
import time

"""
Duplicates checker
This program searches through subdirectories and returns a list of all same files separated by a semicolon ";".
"""
cepoch = int(time.time())
#Detect os Type
tot_red_size , osep, path = (0, None, None)

if (os.name == "nt"):
    osep = "\\"
    path = "C:\\Users\\"

elif (os.name == "posix"):
    osep = "/"
    path = "/home/"
else:
    print("Unsupported OS.")
    sys.exit()


if len(sys.argv) == 1:
        print("No arguments specified\nUse `duplic -h` for help")
        sys.exit()

VERSION = "0.8"
argv = sys.argv[1:]
opts, args = getopt.getopt(argv, 'a:m:hv', ['method', 'help', 'version', 'action'])

ls_data = {}
simdir = []
finsiml = []


def iterate_dirs(root="null", rev=False):
    """Appends a dictionary with a key value pair of filename and filehash from all the files in the directory and subdirectories."""
    global ls_data
    data = []
    iter_dirs = []
    local_lis = {}
    cd_list = []
    if root == "null":
        root = relative_directory
    try:
        cd_list = sorted(os.listdir(root),reverse=rev)  
    except Exception as e:
        print("Could not access:", root, e)     
    for i in cd_list:
        path = root + i
        if os.path.isdir(path):
            local_lis[path] = "".join(sorted(os.listdir(path)))
            iter_dirs.append(root + i + osep)
        else:
            data.append(path)
    for i in iter_dirs:
        data = data + iterate_dirs(root=i)[0]
    ls_data.update(local_lis)
    return data, local_lis
    
def compare_cmp(data, strict=False):
    """Compares all the file paths in a list and returns a lists of all same files"""
    similar_files_list = []
    checked = []
    for i in data:
        if i in checked:
            pass
        else:
            similar_files = []
            similar_files.append(i)
            for o in data:
                print("PROGRESS: " + str(len(checked)) + " of " + str(len(dir_data))+ "  TIME: "+ str(int(time.time()) - cepoch) +"s", end="\r")
                try:
                    if i == o or o in checked:
                        pass
                    elif strict==False:
                        iex = (i + ".")[-9:].split(".")[1]
                        oex = (o + ".")[-9:].split(".")[1]
                        if iex == oex and filecmp.cmp(i, o):
                            similar_files.append(o)
                            checked.append(o)
                        else:
                            pass # Pass if extensions dont match.
                    elif filecmp.cmp(i, o):
                        similar_files.append(o)
                        checked.append(o)
                except:
                    print("Error reading:", i)
            similar_files_list.append(similar_files)
        checked.append(i)
    return similar_files_list

def calc_red_size(l):
    global tot_red_size
    """Calculates the size of redundant files and returns the provided list of files"""
    for i in l:
        sin_red_size = (os.path.getsize(i[0])*(len(i)-1)/10e5)
        tot_red_size += sin_red_size
    return l

def n_list_dir(dir):
    ls = list()
    for i in os.listdir(dir):
        k = dir + osep + i
        if os.path.isdir(k):
            ls.append(k)
            ls += n_list_dir(k)
        else:
            pass
    return ls

def n_check_two_dir(d1, d2):
    ldir = sorted(os.listdir(d1), reverse=True)
    if ldir == sorted(os.listdir(d2), reverse=True):
        for i in ldir:
            if os.path.isdir(d1+osep+i):
               if not(n_check_two_dir(d1+osep+i,d2+osep+i)):
                   return False
        return True
    else:
        return False

def cmp_directory(fdir, sdir,cmp_data):
    """Compares files in a directory one by one with same name"""
    for i in os.listdir(fdir):
        if os.path.isdir(fdir+ osep +i) and not cmp_directory(fdir+osep+i, sdir+osep+i, cmp_dat):
            return False        
        file1, file2 =  (fdir + osep + i), (sdir + osep + i)
        for j in cmp_data:
            if file1 in j and file2 not in j:
                return False
    return True

def return_common_dirs(lis, cmp_dat, strict=True):
    """Returns a list of folders which look similar"""
    print("Finding duplicate directories")
    checked = []
    finsiml = []
    k = 0
    lis = list(lis.keys())
    lis = sorted(lis, reverse=False)
    k = 0
    for i in lis:
        if k < 3:
           k += 1
        if i in checked:
            continue
        simil = [i]
        for j in lis:
           qsame = True
           if j in checked:
               continue
           if i != j and n_check_two_dir(i,j):
                    var = cmp_directory(i,j,cmp_dat)
                    if strict and not(var):
                        pass
                    elif qsame and var:
                        skip = n_list_dir(j)
                        if len(skip) > 0:
                            checked += skip
                        
                        simil.append(j)
                        checked.append(j)
        finsiml.append(simil)
    return finsiml

def scary_function(l, delete=False, is_dir=False):
    """Accepts a nested list containing file paths 
    [["pathtofile1", "anotherpathtofile1, "yaptf1"], ["ptf2","aptf2"]]
    where only ptf[n] are kept rest deleted
    """
    response = input("Please type 'CONFIRM' to delete the shown files or 'ONE' to delete files one by one: ")
    delete_all = (response=="CONFIRM")
    print("\n"+"Files picked for deletion are")
    for i in result:
        k = 1
        while (k<len(i)):
            print("\t" + i[k])
            k += 1
    for i in l:
        for j in i:
            if j != i[0]:
               if delete_all:
                   r = "y"
               else:
                   r = input("Delete " + j + "? y/n: ")[0].lower() 
               if  r == "y":
                    if delete:
                        if is_dir:
                            shutil.rmtree(j)
                        else:
                            os.remove(j)
                    else:
                        src = os.path.dirname(j).split(relative_directory[:-2])[1]
                        print(src)
                        dest = relative_directory+ osep +"MOVED"+str(cepoch)+osep+src
                        print(dest)
                        if not os.path.exists(dest):
                            os.makedirs(dest)
                        shutil.move(j, dest)


def print_lists(lis):
    for i in lis:
        if len(i) > 1:
            print(i)

def usage():
    print(f"Duplic Version {VERSION}\n")
    print("Usage: duplic [OPTION]... [DIRECTORY]")
    print("Please not that this script comes with no warranty whatsoever, use at your own risk")
    print("""
    Example `duplic -m cmp -a move /home/user/Documents`
-m  --method                method to use See METHODS
-a  --action                action to take after finding redundant files <move,delete,print>
-h  --help                  display this help and exit
-v  --version               output version information and exit


METHODS
cmp: Uses the python filecmp module to compare duplicate files.
icmp: Only compares files with same file extensions. (Time efficient)
dirs: Checks for redundant directories and moves them to a directory named `MOVED` inside the main directory
    [Please not that you need to mention compare_then_delete or compare_dirs explicitly to run them]
""")


if __name__ == "__main__":
    method = "compare"
    action = "none"
    for o, a in opts:
        if o in ("-v" , "--version"):
            print("Duplic Version {}".format(VERSION))
            sys.exit()
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-m", "--method"):
            if a[0].lower() in ["i", "c", "d"]:
                method = a.lower()
        elif o in ("-a", "--action"):
            if a[0].lower() in ["m", "d", "n"]:
                action = a[0].lower()
        else:
           assert False, "unhandled option"
    try:
        relative_directory = args[0]
        if (os.name == "posix" and relative_directory[0] == "/") or (os.name == "nt" and relative_directory[1:3] == ":\\"):
            realtive_directory = relative_directory + osep
        else:
            relative_directory =  os.getcwd() + osep + relative_directory + osep
    except IndexError:
        print("Bad directory name provided.\nExiting...")
        sys.exit(1)
    print("Populating directories list...")
    dir_data, garbage1 = iterate_dirs()
    print("Found {} files".format(len(dir_data)))
    print("Looking for duplicate files...")

    if method[0] == "c" or method[0] == "i":
        result = calc_red_size(compare_cmp(dir_data, True))
        if action == "d":
            scary_function(result, True)
        elif action == "m":
            scary_function(result)
        else:
            print_lists(result)

    elif method[0] == "d":
        cmp_dat = calc_red_size(compare_cmp(dir_data, True))
        result  = return_common_dirs(ls_data, cmp_dat)
        if action == "d":
            scary_function(result, True, is_dir=True)
        elif action == "m":
            scary_function(result, is_dir=True)
        else:
            print_lists(result)
        
    print("Total Redundant size: ", tot_red_size, " Mega Bytes")